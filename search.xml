<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go语言从入门到放弃系列&lt;4&gt; 常用的Go命令</title>
      <link href="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言从入门到放弃系列-lt-4-gt-常用的Go命令"><a href="#Go语言从入门到放弃系列-lt-4-gt-常用的Go命令" class="headerlink" title="Go语言从入门到放弃系列&lt;4&gt; 常用的Go命令"></a>Go语言从入门到放弃系列&lt;4&gt; 常用的Go命令</h2><p>&emsp;&emsp;在上一节中，我们集中对快速入门程序Hello World的编写做出了简要的讲解，同时对包的概念，引入的方式，主函数的执行流程做出基本的介绍。在这一节中，我们将对Go语言的中命令行的常用命令进行介绍。</p><p>&emsp;&emsp;相信许多初学者通过集成开发工具进行入门开发时，将两个go文件写在了同一个文件夹下，同时又都具备main函数，在用ide运行的时候报出了错误，我们从这个错误引入到今天的命令的介绍中。</p><p><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/1.png" alt><br><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/2.png" alt></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>&emsp;&emsp;在上一节中，我们提出了包的概念，并且说明了一个项目中只能存在一个main函数，而一般来说，ide的编译运行是以工程为基础。换句话讲，便是以文件夹为基础的编译。因此当开发工具检测到同一个文件夹中含有两个或多个main函数时，会报出主函数重定义的错误。</p><p>&emsp;&emsp;1. 第一个解决办法当然便是将不同的go文件分放在不同的文件夹下，这样使得每个文件夹即每个工程都可以单独地进行编译以及运行，不过对于初学者来说这种做法尚不甚方便，到目前为止乃至于之后一段时间内所写的Demo性质的程序往往都是以单个文件为基础的，因此这个方法对于目前来说不是很适用。</p><p><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/3.png" alt></p><p>&emsp;&emsp;2. 第二个解决办法便是通过Go语言的命令行形式进行编译运行，就如同在前几节所提及的那样，通过控制台的cd命令进入到go文件所在的目录，然后运用go run命令进行运行，这种方式是以单个文件的方式进行编译的，因此不会报出重定义的错误。go语言的命令相对来说并不多，常用的也就更少了，我们会在下面着重讲述几个命令。</p><h3 id="常用的Go命令"><a href="#常用的Go命令" class="headerlink" title="常用的Go命令"></a>常用的Go命令</h3><p>&emsp;&emsp;如果在控制台直接输入go help命令，我们会发现系统提示了许多的可用命令，在这里便列一个表格，分别简单解释一下每个命令的含义。在后面我们也会针对其中的几个进行详细地讲解。</p><table><thead><tr><th>Go命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>build</td><td align="center">编译包和依赖</td></tr><tr><td>clean</td><td align="center">移除对象文件</td></tr><tr><td>doc</td><td align="center">显示包或者符号的文档</td></tr><tr><td>env</td><td align="center">打印go的环境信息</td></tr><tr><td>bug</td><td align="center">启动错误报告</td></tr><tr><td>fix</td><td align="center">运行go tool fix</td></tr><tr><td>fmt</td><td align="center">运行gofmt进行格式化</td></tr><tr><td>generate</td><td align="center">从processing source生成go文件</td></tr><tr><td>get</td><td align="center">下载并安装包和依赖</td></tr><tr><td>install</td><td align="center">编译并安装包和依赖</td></tr><tr><td>list</td><td align="center">列出包</td></tr><tr><td>run</td><td align="center">编译并运行go程序</td></tr><tr><td>test</td><td align="center">运行测试</td></tr><tr><td>tool</td><td align="center">运行go提供的工具</td></tr><tr><td>version</td><td align="center">显示go的版本</td></tr><tr><td>vet</td><td align="center">运行go tool vet</td></tr></tbody></table><h4 id="build和run命令"><a href="#build和run命令" class="headerlink" title="build和run命令"></a>build和run命令</h4><p>&emsp;&emsp;正如同其他的静态语言一般，Go语言也是需要先编译再运行的。编译过程产生可执行文件，如Windows中的exe文件，之后再运行该可执行文件。而go build命令就是用来编译的，并不是所有的go程序都会编译出可执行文件，其条件即为：go程序属于main包、main包中包含main函数。现在假如在test文件夹中只有一个TestDemo.go文件，我们通过命令行定位到该位置后，键入go build TestDemo.go后，结果将如下图所示：</p><p><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/4.png" alt></p><p>&emsp;&emsp;从上图我们可以发现，build命令会生成一个与go文件相同名的可执行文件，进而执行该文件可以得到输出结果。可是往往我们在实际开发中，并不希望生成的可执行文件与go文件是同名的，在另一些情况下多个go程序生成的名字是相同的时候，会覆盖旧版本的exe文件（在大工程中很容易出现）。因此我们希望在编译过程中将生成的结果修改名字，其命令为： go build -o 新名字 go文件。</p><p><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/5.png" alt></p><p>&emsp;&emsp;而go run的方法则是将编译和运行两个步骤合并为一个步骤，因此我们在使用go run命令时，在当前的文件夹中或其他的位置是找不到可执行文件的生成的，这很适用于程序开发中的调试阶段，具体便不做演示了。</p><h4 id="fmt以及doc命令"><a href="#fmt以及doc命令" class="headerlink" title="fmt以及doc命令"></a>fmt以及doc命令</h4><p>&emsp;&emsp;在上一节中我们演示到一个问题，就是大括号的位置问题。同时，Go语言有一个特性，便是对格式的要求十分的严格。不同的开发者对这个特性的看法不一，不过也是需要遵守这个格式的。各个开发者的格式是统一的，便利于组合开发以及代码的清晰。go fmt命令便是格式化代码，将代码根据规定的格式进行调整。其格式为：go fmt xxx.go，这个也不做演示了，而且一般情况下也不要手动去调用，一般的集成开发工具都会自动帮助我们去调整。</p><p>&emsp;&emsp;doc命令是查看文档的命令，例如我们在使用fmt包的时候忘记了某个函数如何去写，或希望查到某个函数的具体含义，可能就会用到这个命令，其格式为:go doc package，在终端上就会显示这个包的文档。由于控制台的大小有限，一般来说直接go doc一个包会显示不全。不过我们可以使用go doc package.function来查具体的功能。</p><p><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/6.png" alt></p><p>&emsp;&emsp;还有一个比较好的一点是，这个命令可以启动我们自己的文档服务器，比如说我们使用godoc -http=:10000(数字可以随意，不过需要大于1024)，之后打开一个浏览器，在网址栏中输入localhost:10000我们会发现出现了图形界面的帮助文档，可以离线地、更方便地查询信息。</p><p><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/7.png" alt></p><h4 id="get和install命令"><a href="#get和install命令" class="headerlink" title="get和install命令"></a>get和install命令</h4><p>&emsp;&emsp;get命令也是十分常用的命令，我们可以通过这个命令来直接从网上下载第三方的包，调用方式为go get source。如果本地已经存有该文件，便会更新指定的代码和依赖，如果使用go语言操作redis数据库，下载并使用beego的web框架时等，会通过这个命令进行下载。</p><p>&emsp;&emsp;install命令与build命令十分的相像，其结果都是生成一个可执行程序，不同点便是生成的可执行文件的路径、名字、以及依赖包。这时我们需要在环境变量中配置GOBIN变量，这个变量的值便是GOPATH下的bin目录，在这里我们简要地演示一下。</p><p><img src="/2020/02/07/4-%E5%B8%B8%E7%94%A8%E7%9A%84Go%E5%91%BD%E4%BB%A4/8.png" alt></p><p>&emsp;&emsp;那么install和build的区别具体可用如下的表格来表示:</p><table><thead><tr><th>区别</th><th align="left">install</th><th align="center">build</th></tr></thead><tbody><tr><td>生成可执行文件路径</td><td align="left">在工作目录的bin目录下，或GOBIN下</td><td align="center">当前目录下</td></tr><tr><td>可执行文件名</td><td align="left">和源码所在的目录同名</td><td align="center">与go文件同名，或-o设定</td></tr><tr><td>依赖包</td><td align="left">在工作目录的pkg文件夹中</td><td align="center">-</td></tr></tbody></table><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>&emsp;&emsp;在这个小结中，我们初步解决了在Demo演示过程中出现的主函数重定义问题，以及介绍了一些Go语言中相对常用的几个命令。在下一小节中，我们将集中讲解进制相关的一些问题，进而在后续的文章中引出数据类型的概念以及其可以表示的大小的限制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言从入门到放弃系列&lt;3&gt; 基于Hello World的几点讨论</title>
      <link href="/2020/02/06/3-%E5%9F%BA%E4%BA%8EHelloWorld%E7%9A%84%E5%87%A0%E7%82%B9%E8%AE%A8%E8%AE%BA/"/>
      <url>/2020/02/06/3-%E5%9F%BA%E4%BA%8EHelloWorld%E7%9A%84%E5%87%A0%E7%82%B9%E8%AE%A8%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言从入门到放弃系列-lt-3-gt-基于Hello-World的几点讨论"><a href="#Go语言从入门到放弃系列-lt-3-gt-基于Hello-World的几点讨论" class="headerlink" title="Go语言从入门到放弃系列&lt;3&gt; 基于Hello World的几点讨论"></a>Go语言从入门到放弃系列&lt;3&gt; 基于Hello World的几点讨论</h2><p>&emsp;&emsp;在第一个小节中，我们阐述了Go语言环境的安装与配置，同时也写了一小段的程序来验证开发环境是否正确配置。那么在这一节中，我们集中针对于这段代码自上而下进行几点简要的讲解。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hello World的编写</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go语言代码注释"><a href="#Go语言代码注释" class="headerlink" title="Go语言代码注释"></a>Go语言代码注释</h3><p>&emsp;&emsp;Go语言的注释风格依旧遵循了C语言的注释风格，即采用两个斜杠（//）对单行注释，同时也支持/*…*/的方式对代码块进行注释。一般来说，行注释更为通用，块注释主要是针对包的详细说明或者屏蔽更大的代码块而使用的。 </p><p>&emsp;&emsp;注释的作用往往是为了标注某个变量、代码块、或者函数等的具体功能，以备后续维护时能够快速地理解代码的含义。因此在实际开发中，强烈建议每个包都具备一个注解，即package前的注解，这个注解会详细介绍此包、提供相应的包信息、注明作者引用等等。</p><p>&emsp;&emsp;处在注释中的语句是不执行的，同样地，在编译的过程中也不会参与编译的过程。因此，不必担心写太多的注释会令可执行文件增大。注释出现的位置也是十分地灵活，可以出现在某行中，也可以出现在某条语句的结尾，但不可以出现在某条语句的中间。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="comment">//注释可以出现在某行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;<span class="comment">//也可以出现在某语句的结尾</span></span><br><span class="line">fmt.Println(<span class="string">"您好世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go语言的包"><a href="#Go语言的包" class="headerlink" title="Go语言的包"></a>Go语言的包</h3><p>&emsp;&emsp;同一些其他的语言一样，Go语言是以包package作为管理单位，如果针对于文件系统可以理解为以文件夹为管理单位。因此，每个Go文件都需要声明包，并且只能存在于一个包内。不仅如此，每个程序中都必须要有一个main包，如果没有main包是无法编译通过的。</p><p><img src="/2020/02/06/3-%E5%9F%BA%E4%BA%8EHelloWorld%E7%9A%84%E5%87%A0%E7%82%B9%E8%AE%A8%E8%AE%BA/2.png" alt></p><p>&emsp;&emsp;在日后的开发过程中，package的名字当然可以不是main，但是具备main函数的go文件必须是main包，因此在开发中，尤其指多人的开发中，每个程序员负责自己的部分，便会以包的名字建立一个文件夹，只是不在其中写main函数，这个问题我们在后面的一些章节会再次提及。由于我们目前的开发均在一个文件中，不需要跨越文件编程，因此在习惯上暂且先都写package main即可。</p><h3 id="包的引入"><a href="#包的引入" class="headerlink" title="包的引入"></a>包的引入</h3><p>&emsp;&emsp;在开发的过程中往往需要使用开发者所提供的函数，或者其他人的代码，这时就需要将这个包进行引入操作，所用的关键字为import。fmt包是我们接触到的第一个引用的包，这个包的作用是提供了许多的格式化输出的函数。当我们希望在屏幕上打印出某行汉字的时候，我们不需要了解其内部的过程，如何让屏幕的像素点亮起来，我们只需要知道调用该包的特定函数可以完成需求。当然，fmt包中不仅仅具备格式化输出的函数，随着学习的深入，我们将会接触到更多的包和相应的函数。</p><p>&emsp;&emsp;有时候在程序开发的过程中，我们可能不仅仅需要引用一个包，而是需要引入多个包。比如说，我希望生成一个随机数，并且采用当前时间为种子进行随机生成，最后将这个随机数打印在屏幕上（这个案例我们后续会讲到）。那么，我们可能需要多个包，生成随机数需要一个包，获取时间需要一个包，打印在屏幕上需要一个包，因此需要多个包的引入。引入的方式有两种，分别为：多个import关键字，一个import后加一个小括号，将包写于括号中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/rand"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="主函数及大括号"><a href="#主函数及大括号" class="headerlink" title="主函数及大括号"></a>主函数及大括号</h3><p>&emsp;&emsp;每一个项目中都需要有一个主函数，注意这不是指每一个Go文件都有一个主函数。主函数作为程序的入口，往往会最先被执行（这个说法不好，后面会对这句话进行更正，初期可以先这样理解）。声明函数的关键字func即function的前四个字母，main为函数名，后面的括号为函数参数，大括号所包裹的代码即为函数体（在函数的章节中会详细讲）。程序便从大括号后的第一行开始执行，直到函数的结束。</p><p>&emsp;&emsp;与一些传统的编程语言相不同的是，Go语言语句后不需要以分号为结尾。同时，大括号的位置也不如C语言等那样灵活。Go语言的规定是：左大括号的位置一定需要是某个块定义的结尾，而不能单独另取一行，否则在编译时是无法通过的。</p><p><img src="/2020/02/06/3-%E5%9F%BA%E4%BA%8EHelloWorld%E7%9A%84%E5%87%A0%E7%82%B9%E8%AE%A8%E8%AE%BA/5.png" alt></p><h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><p>&emsp;&emsp;在日后的计算机的学习中，我们将会接触到计算机程序的三大流程控制，分别为：顺序结构、分支结构、和循环结构。我们今天所接触到的便是其中的第一个：顺序结构。</p><p>&emsp;&emsp;顺序结构的核心思想是，程序从上至下逐条依次执行，每一条都会被执行，而且每条都会被执行一次。例如我们在程序中令其多次输出几个字符串，我们会发现结果的输出与程序中的输出顺序是相一致的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"您好世界 1"</span>)</span><br><span class="line">fmt.Println(<span class="string">"您好世界 2"</span>)</span><br><span class="line">fmt.Println(<span class="string">"您好世界 3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这段代码的输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">您好世界 <span class="number">1</span></span><br><span class="line">您好世界 <span class="number">2</span></span><br><span class="line">您好世界 <span class="number">3</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;在我们后续讲到函数，并且提及defer关键字时，会对现有的理解的顺序结构产生冲击，这个问题我们在日后会详细地进行讲解。</p><p>&emsp;&emsp;在程序中，我们可以看到的是，函数的调用往往是需要包的存在的，也就是说Println函数是属于fmt包的，即便是自己定义的函数，也是属于当前的package的。如果不通过fmt包，就无法直接使用Println函数，也就无法通过这个函数向屏幕中输出了。还有一个需要注意的点是：当引入了某个包，但是这个包并没有在程序中被使用，也是不允许的。在编译过程中会报如下的错误： </p><p><img src="/2020/02/06/3-%E5%9F%BA%E4%BA%8EHelloWorld%E7%9A%84%E5%87%A0%E7%82%B9%E8%AE%A8%E8%AE%BA/7.png" alt></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>&emsp;&emsp;在这个小节中，我们针对快速入门程序，Hello World的输出程序，进行了几点简要的讨论，分别讲解了注释的用法，包的概念的入门，主函数的作用，以及函数体中的顺序结构。同时，也对开发中的几点小细节做出了说明，如大括号位置，包的使用等等。</p><p>&emsp;&emsp;在下一小节中，我们将讲解一些cmd命令行中与Go相关的一些命令，并集中讲解几个常用的命令以及实际过程中的运用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言从入门到放弃系列&lt;2&gt; 编码及几种ide的介绍</title>
      <link href="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言从入门到放弃系列-lt-2-gt-编码及几种ide的介绍"><a href="#Go语言从入门到放弃系列-lt-2-gt-编码及几种ide的介绍" class="headerlink" title="Go语言从入门到放弃系列&lt;2&gt; 编码及几种ide的介绍"></a>Go语言从入门到放弃系列&lt;2&gt; 编码及几种ide的介绍</h2><p>&emsp;&emsp;在这个小节中，我们首先介绍几个实用的常用的Go语言的集成开发工具，并对几种工具做一个简要的比较，集成开发工具的选择会方便程序员对程序的编写，但对于语言本身来说是基本没有关系的。因此，不必过于纠结于集成开发工具的选择，做到能用、方便、正确即可以。同时，对于初学者来说，建议使用功能不是十分强大的开发工具，这样能相对强制性地记住更多的基本的语法与应用。</p><h3 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h3><p>&emsp;&emsp;在这一小节中，我们首先介绍计算机中的编码格式，通过对编码格式的叙述引入对ide的介绍。编码是用预先规定的方法将文字、数字或其它对象编成数码，或将信息、数据转换成规定的电脉冲信号（引用自百度百科）。通俗一点解释便是，将每个字符（汉字、字母等）与计算机中的数字相关联。字符是有限的，而数字是无限的，因此，每一个字符必定能对应于一个数字，这个对应关系便是编码。 </p><p>&emsp;&emsp;目前来说，对于中国的用户而言，常见的编码格式有ASCII、ANSI、GBK、GB2312、UTF-8等等。不同的编码格式有不同的对应关系，因此在网络传输时，或者在打开文件时，如若对应的编码格式是不一致的，内容就会显示为乱码。</p><p>&emsp;&emsp;从计算机对多国语言的支持程度上来分，编码可以分为三个阶段。第一个阶段是计算机的初期，只在美国国内通用时，是只支持英文显示的，而其他国家的语言是无法显示的。在这个阶段的代表性编码规则为ASCII码。随着计算机的国际通用，各国均开始研发适应于本国的编码规则，也为第二阶段，不同的国家制定了不同的标准，出现了采用两个字节代表一个字符的汉字延伸编码方式，称为ANSI编码，如GB2312等。然而不同国家的ANSI编码依旧不兼容。所以便进入了第三个阶段，UNICODE编码，这种编码为每一个国家、每一种语言、每一个字符均设定了统一的且是唯一的数字编号，以满足跨语言，跨平台的特性，代表字符集为UTF-8编码。</p><p> &emsp;&emsp;对于Go语言来说，为了出现字符集的冲突与乱码的形成，官方规定：所有的字符编码均为<strong>UTF-8</strong>编码，如果采用了其他的编码样式，程序是无法编译通过的。采用上一个小节所举的例子，将编码改为ANSI后并输入对应的中文，运行时会出现如下的效果：</p><p><img src="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/1.png" alt></p><p>&emsp;&emsp;在将字符集恢复成UTF-8编码之后，就恢复了正常的显示。所以在各个集成开发工具中，默认的字符编码均为UTF-8编码，所以在使用工具时，可以不需要担心这个问题。</p><p><img src="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/2.png" alt></p><h3 id="几种集成开发工具的介绍"><a href="#几种集成开发工具的介绍" class="headerlink" title="几种集成开发工具的介绍"></a>几种集成开发工具的介绍</h3><h4 id="1-LiteIDE"><a href="#1-LiteIDE" class="headerlink" title="1. LiteIDE"></a>1. LiteIDE</h4><p>&emsp;&emsp;LiteIDE是一款开源的简单的IDE，同时也是Go语言的首个发布的正式版的IDE，通过QT开发，是专门为了Go语言而设计的。在LiteIDE中，可以直接配置构建命令，高级代码编辑，代码管理，自动完成格式化等多个功能。是一个十分轻量级且功能强大的小开发工具。</p><p><img src="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/3.png" alt></p><h4 id="2-VSCode"><a href="#2-VSCode" class="headerlink" title="2. VSCode"></a>2. VSCode</h4><p>&emsp;&emsp;VSCode是微软开发的一个开源IDE，单独这款IDE本身不支持Go语言开发，需要在IDE中进行Go语言的扩展，也是十分方便的。同样地，VSCode的诸多插件也为开发者提供了许多的功能。不仅如此，它也提供了多种语言的支持，使之成为广受欢迎的集成开发工具。</p><p><img src="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/4.png" alt></p><h4 id="3-GoClipse插件"><a href="#3-GoClipse插件" class="headerlink" title="3. GoClipse插件"></a>3. GoClipse插件</h4><p>&emsp;&emsp;看到这个名字可能会比较熟悉，会想起一款名为eclipse的开发工具，GoClipse正是eclipse的插件，通过使用这个插件，开发者可以通过流行的eclipse开发工具进行go语言的开发，其优点是高度的可扩展性，包括源代码编辑器，项目向导，以及GDB项目调试器等等。eclipse和GoClipse插件均为开源的，因此也是免费的。 </p><p><img src="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/5.png" alt></p><h4 id="4-VIM编辑器"><a href="#4-VIM编辑器" class="headerlink" title="4. VIM编辑器"></a>4. VIM编辑器</h4><p>&emsp;&emsp;这个想必也不需要多说，经常使用Linux和MacOS操作系统的对于这个简直不能更熟悉，通过VIM-Go插件使得该编辑器具备了编译器，增强的语法高亮、代码折叠等等功能。除此之外，也可以集成一些高级的源分析工具。可以讲，VIM编辑器的强大之处完全不仅仅在于对Go语言的支持上。</p><p><img src="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/6.png" alt></p><h4 id="5-Goland"><a href="#5-Goland" class="headerlink" title="5. Goland"></a>5. Goland</h4><p>&emsp;&emsp;Goland是由JetBrains公司开发的，旨在为Go语言开发者提供一个更为简便、快速的开发环境。这个商业的IDE整合了IntelliJ平台的Go相关的辅助编码功能和其他的工具。Goland是一个极为强大的开发工具，具备智能补全，检查和快速修复，格式化程序，以及调试器，版本控制器等功能。当然商业工具是需要付费的，对于个人使用可以采用破解<strong>（划掉，改为购买~）</strong>的方式。</p><p><img src="/2020/02/05/2-%E7%BC%96%E7%A0%81%E5%8F%8A%E5%87%A0%E7%A7%8Dide%E7%9A%84%E4%BB%8B%E7%BB%8D/7.png" alt></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>&emsp;&emsp;在这个小节中，我们首先介绍了编码的含义以及Go语言对编码的要求，同时也介绍了几款相对好用的集成开发工具可供选择，在下一个小节中，我们将集中对第一个Go语言程序，Hello World的输出程序，进行简要的讲解以及对初期开发过程中所需要注意的问题和要求进行说明。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言从入门到放弃系列&lt;1&gt; 环境安装及设置</title>
      <link href="/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/"/>
      <url>/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Go语言从入门到放弃系列-lt-1-gt-环境安装及设置"><a href="#Go语言从入门到放弃系列-lt-1-gt-环境安装及设置" class="headerlink" title="Go语言从入门到放弃系列&lt;1&gt; 环境安装及设置"></a>Go语言从入门到放弃系列&lt;1&gt; 环境安装及设置</h2><p>&emsp;&emsp;首先第一节，今天便说一说Go语言开发环境的搭建。所谓工欲善其事，必先利其器，没有开发环境对于Go语言的开发简直如同空谈。因此在本章节中，我们会集中阐述开发环境的安装，环境变量的配置，以及对环境变量配置的结果进行验证。</p><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><p>&emsp;&emsp;最先说明，在写这篇文章的时候，我采用的是windows环境，因此我的各项操作均是基于windows操作系统的，如果读者希望采用其他的系统进行开发，可以在网络上找到配置的方式。此处只介绍windows相关配置，其他系统暂不再赘述。</p><p>&emsp;&emsp;首先，作为最初的，便是在网络中下载Go的安装包，本文给出安装包的下载地址：<a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a> </p><p>&emsp;&emsp;需要说明的是，这个网站可能需要翻墙才能进入，因此如果打不开可以尝试这个地址：<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a> 因为本人是在国内开始写的这个连载，因此采用的是第二个网址。进入下载页面后如下图（图片将来可能会根据网站版本不同而改变）：</p><p><img src="/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/1.png" alt></p><p>&emsp;&emsp;从图中可以看出，Go官方提供了基于不同系统的不同的安装包，只需要下载相应系统的安装包，再根据不同系统的命令进行安装即可，我们以下依旧采用windows为例。安装过程便不作具体描述了，一般来说不需要修改其中的设置，只需要下一步直到完成。值得说明的是，当选择Go语言开发环境的安装位置时如果不作修改便是C:\Go这个文件夹，修改的话需要记住修改后的位置，在后续配置中是需要的。同时，在安装过程中，尽量不要出现中文路径，以防止后续出现问题。</p><p>&emsp;&emsp;在安装过后，我们打开cmd命令控台，键入go version命令（中间有空格）</p><p><img src="/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/2.png" alt></p><p>&emsp;&emsp;从上图我们可以看到的是，我的机器的Go开发环境版本为1.11.2，如果安装不同的版本，这个版本号会不同。在安装过后，我们进入环境变量中会发现，系统自动为我们设置了GOROOT环境变量，并且该值为 <strong>刚刚安装的目录</strong> ，如果发现该值与安装目录不同，需要进行修改。本人在安装的时候没有对安装目录进行修改，所以均为默认值。</p><p>&emsp;&emsp;除此之外，还需要检查Path变量是否进行了更新，对Path的配置便是在后面加入 <strong>安装目录下的bin\目录</strong> 的全路径，建议用分号将其与前后的其他设置分开。</p><p><img src="/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/3.png" alt></p><p> &emsp;&emsp;到目前为止，可以说环境变量已经配置完了，可以进行初级的开发，不过为了后续的开发方便，我们继续配置GOPATH环境变量，在Go语言的包引入过程中，是采用%GoPath%\src为起始的目录引入的，因此建议单独生成一个文件夹，并将所有的源代码均写在这个文件夹的src目录中，而GOPATH的配置便是这个文件夹，本人在E盘下新建了GoProject，并且所有的源代码均写于E:\GoProject\src\xxx\yyy.go下，因此我的GOPATH为： <strong>E:\GoProject</strong></p><p>&emsp;&emsp;此时我们在cmd控制台中键入： go env，将显示出当前GO的所有环境配置，如下图所示。</p><p><img src="/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/4.png" alt></p><h3 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试"></a>环境测试</h3><p>&emsp;&emsp;安装环境已经结束，接下来我们需要对环境的配置进行检测，便写一段简单的代码进行验证。代码也是众所周知的Hello World的输出。首先，我们在任意一个文件夹下建立一个.txt文件并将扩展名改为.go，本人便于桌面上建立一个test.go文件。请注意，在修改文件时一并修改的文件格式，也就是将隐藏已知文件名的选项去掉，否则会成为一个test.go.txt的文件。（windows各版本设置方式不同，windows7为例）</p><p><img src="/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/5.png" alt></p><p>&emsp;&emsp;采用记事本的方式打开，并在其中输入如下代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Hello World的编写</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后，打开cmd控制台，进入到桌面上，键入go run test.go后会立刻出现程序的执行结果，也就是在控制台输出了Hello World字样，如果成功输出则代表Go环境在本机配置正确，可以进行代码的编写了。</p><p><img src="/2020/02/04/1-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AE%BE%E7%BD%AE/6.png" alt></p><p>&emsp;&emsp;环境配置工作是相对简单的，本人也暂时没有发现在这个过程中出现什么问题，因此也不知如何去写问题的解答。不过一定要注意将环境配好，这可能会影响后续一些小节的内容的讲解。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>&emsp;&emsp;这个小节集中阐述了Go语言开发环境的安装，环境变量的配置，以及入门程序Hello World的编写。其版本号以及其他图片实例均与个人的配置相关，或在版本升级后将有其他的样式。在下一章，我们将集中介绍几款GO开发的集成开发环境，并选择其中一个进行安装。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go语言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
